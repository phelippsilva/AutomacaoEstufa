
/*
 * Inicio do RTC
 */

/**
 * Converte decimal para bcd
 */
//unsigned char dec2bcd(unsigned char val) {
//	return ((val / 0xA * 0x10) + (val % 0xA));
//}
//
//unsigned char bcd2bin(unsigned char val) {
//	return (val - 6 * (val >> 4));
//}
Void lerRTC(UChar *read) {

#define READ_COUNT 7
	I2C_Handle i2c;
	UInt peripheralNum = 0; /* Interface I2C0 */
	I2C_Params i2cParams;
	I2C_Transaction i2cTransaction;
	UChar writeBuffer[9];
	//writeBuffer[0] = 0;
	UChar readBuffer[READ_COUNT];
	Bool transferOK;
	I2C_Params_init(&i2cParams);
	i2c = I2C_open(peripheralNum, &i2cParams);
	if (i2c == NULL) {
		printf("Não foi possível abrir a interface I2C0!\n");
		fflush(stdout);
	}

	/*
	 * Procedimento para ajustar a hora do RTC
	 * Converte o número utilizando a função
	 * unsigned char bin2bcd(unsigned char val) {return (val + 6 * (val / 10));}
	 * Onde 'val' é um valor que será convertido para código bcd, necessário para o ajuste do RTC
	 */
	writeBuffer[0] = 0; //estático
	writeBuffer[1] = (0 + 6 * (0 / 10)); //segundos
	writeBuffer[2] = (59 + 6 * (59 / 10)); //minutos
	writeBuffer[3] = (21 + 6 * (21 / 10)); //horas
	writeBuffer[4] = (5 + 6 * (5 / 10)); //dia da semana
	writeBuffer[5] = (15 + 6 * (15 / 10)); //dia
	writeBuffer[6] = (8 + 6 * (8 / 10)); //mes
	writeBuffer[7] = (14 + 6 * (14 / 10)); //ano
	writeBuffer[8] = 0; //estático

//	i2cTransaction.slaveAddress = 0x68; /* 7-bit peripheral slave address */
//	i2cTransaction.writeBuf = writeBuffer; /* Buffer to be written */
//	i2cTransaction.writeCount = 9; /* Number of bytes to be written */
//	i2cTransaction.readBuf = readBuffer; /* Buffer to be read */
//	i2cTransaction.readCount = READ_COUNT; /* Number of bytes to be read */
//	transferOK = I2C_transfer(i2c, &i2cTransaction); /* Perform I2C transfer */
//	if (!transferOK) {
//		printf("Falha na comunicação\n");
//		fflush(stdout);
//	}
	/*
	 * Final do procedimento para ajuste de hora do RTC
	 */

	//Seta os parâmetros para a comunicação
	i2cTransaction.slaveAddress = 0x68; /* 7-bit peripheral slave address */
	i2cTransaction.writeBuf = writeBuffer; /* Buffer to be written */
	i2cTransaction.writeCount = 1; /* Number of bytes to be written */
	i2cTransaction.readBuf = readBuffer; /* Buffer to be read */
	i2cTransaction.readCount = READ_COUNT; /* Number of bytes to be read */

	Task_sleep(100);
	//Comunica com o dispositivo
	transferOK = I2C_transfer(i2c, &i2cTransaction);
	if (!transferOK) {
		printf("Falha na comunicação\n");
		fflush(stdout);
	}

	/**converte os valores lidos no formato BCD para valores decimais utilizando a função:
	 *unsigned char bcd2dec(unsigned char val) {return ((val / 0x10 * 0xA) + (val % 0x10));}
	 * Depois escreve na memória do microcontrolador
	 */

	//*(read) = bcd2dec(readBuffer[0]) & 0x7f;
	*(read) = ((readBuffer[0] / 0x10 * 0xA) + (readBuffer[0] % 0x10)) & 0x7f;
	//*(read + 1) = bcd2dec(readBuffer[1]);
	*(read + 1) = ((readBuffer[1] / 0x10 * 0xA) + (readBuffer[1] % 0x10));
	//*(read + 2) = bcd2dec(readBuffer[2]) & 0x3f;
	*(read + 2) = ((readBuffer[2] / 0x10 * 0xA) + (readBuffer[2] % 0x10))
			& 0x3f;
	//*(read + 3) = bcd2dec(readBuffer[3]);
	*(read + 3) = ((readBuffer[3] / 0x10 * 0xA) + (readBuffer[3] % 0x10));
	//*(read + 4) = bcd2dec(readBuffer[4]);
	*(read + 4) = ((readBuffer[4] / 0x10 * 0xA) + (readBuffer[4] % 0x10));
	//*(read + 5) = bcd2dec(readBuffer[5]);
	*(read + 5) = ((readBuffer[5] / 0x10 * 0xA) + (readBuffer[5] % 0x10));
	//*(read + 6) = bcd2dec(readBuffer[6]);
	*(read + 6) = ((readBuffer[6] / 0x10 * 0xA) + (readBuffer[6] % 0x10));

	//Mostra na tela os valores lidos
	printf("%d:%d:%d", *(read + 2), *(read + 1), *(read));
	fflush(stdout);
	printf(" - %d - ", *(read + 3));
	fflush(stdout);
	printf("%d/%d/%d ", *(read + 4), *(read + 5), *(read + 6));
	printf("\n");
	fflush(stdout);

	I2C_close(i2c);

}
/*
 * Fim do RTC
 */
