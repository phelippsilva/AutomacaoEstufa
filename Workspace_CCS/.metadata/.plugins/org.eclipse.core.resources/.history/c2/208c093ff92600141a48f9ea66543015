/*
 * rtc.c
 *
 *  Created on: 18/08/2014
 *      Author: Tiago
 */
#include "rtc.h"

/**
 * Converte decimal para bcd
 */
unsigned char dec2bcd(unsigned char val) {
	return ((val / 0xA * 0x10) + (val % 0xA));
}

/**
 * Converte binário para bcd
 */
unsigned char bin2bcd(unsigned char val) {
	return (val + 6 * (val / 10));
}

/**
 * Converte bcd para binário
 */
unsigned char bcd2bin(unsigned char val) {
	return (val - 6 * (val >> 4));
}

// convert BCD para decimal
unsigned char bcd2dec(unsigned char val) {
	return ((val / 0x10 * 0xA) + (val % 0x10));
}

/**
 * Lê os valores do RTC e escreve na memória apontada por *read
 */
Void lerRTC(UChar *read) {

#define READ_COUNT 7
	I2C_Handle i2c;
	UInt peripheralNum = 0; /* Interface I2C0 */
	I2C_Params i2cParams;
	I2C_Transaction i2cTransaction;
	UChar writeBuffer[9];
	//writeBuffer[0] = 0;
	UChar readBuffer[READ_COUNT];
	Bool transferOK;
	I2C_Params_init(&i2cParams);
	i2c = I2C_open(peripheralNum, &i2cParams);
	if (i2c == NULL) {
		printf("Não foi possível abrir a interface I2C0!\n");
		fflush(stdout);
	}

	/*
	 * Procedimento para ajustar a hora do RTC
	 */
	writeBuffer[0] = 0;
	writeBuffer[1] = bin2bcd(0);
	writeBuffer[2] = bin2bcd(59);
	writeBuffer[3] = bin2bcd(21);
	writeBuffer[4] = bin2bcd(5);
	writeBuffer[5] = bin2bcd(15);
	writeBuffer[6] = bin2bcd(8);
	writeBuffer[7] = bin2bcd(14);
	writeBuffer[8] = 0;

//	i2cTransaction.slaveAddress = 0x68; /* 7-bit peripheral slave address */
//	i2cTransaction.writeBuf = writeBuffer; /* Buffer to be written */
//	i2cTransaction.writeCount = 9; /* Number of bytes to be written */
//	i2cTransaction.readBuf = readBuffer; /* Buffer to be read */
//	i2cTransaction.readCount = READ_COUNT; /* Number of bytes to be read */
//	transferOK = I2C_transfer(i2c, &i2cTransaction); /* Perform I2C transfer */
//	if (!transferOK) {
//		printf("Falha na comunicação\n");
//		fflush(stdout);
//	}
	/*
	 * Final do procedimento para ajuste de hora do RTC
	 */

//Seta os parâmetros para a comunicação
	i2cTransaction.slaveAddress = 0x68; /* 7-bit peripheral slave address */
	i2cTransaction.writeBuf = writeBuffer; /* Buffer to be written */
	i2cTransaction.writeCount = 1; /* Number of bytes to be written */
	i2cTransaction.readBuf = readBuffer; /* Buffer to be read */
	i2cTransaction.readCount = READ_COUNT; /* Number of bytes to be read */

	Task_sleep(100);
	//Comunica com o dispositivo
	transferOK = I2C_transfer(i2c, &i2cTransaction);
	if (!transferOK) {
		printf("Falha na comunicação\n");
		fflush(stdout);
	}

	//converte os valores lidos e escreve na memória do microcontrolador
	//*(read) = bcd2dec(readBuffer[0]) & 0x7f;
	*(read) = ((readBuffer[0] / 0x10 * 0xA) + (readBuffer[0] % 0x10)) & 0x7f;
	//*(read + 1) = bcd2dec(readBuffer[1]);
	*(read + 1) = ((readBuffer[1] / 0x10 * 0xA) + (readBuffer[1] % 0x10));
	//*(read + 2) = bcd2dec(readBuffer[2]) & 0x3f;
	*(read + 2) = ((readBuffer[2] / 0x10 * 0xA) + (readBuffer[2] % 0x10))
			& 0x3f;
	//*(read + 3) = bcd2dec(readBuffer[3]);
	*(read + 3) = ((readBuffer[3] / 0x10 * 0xA) + (readBuffer[3] % 0x10));
	//*(read + 4) = bcd2dec(readBuffer[4]);
	*(read + 4) = ((readBuffer[4] / 0x10 * 0xA) + (readBuffer[4] % 0x10));
	//*(read + 5) = bcd2dec(readBuffer[5]);
	*(read + 5) = ((readBuffer[5] / 0x10 * 0xA) + (readBuffer[5] % 0x10));
	//*(read + 6) = bcd2dec(readBuffer[6]);
	*(read + 6) = ((readBuffer[6] / 0x10 * 0xA) + (readBuffer[6] % 0x10));

	//Mostra na tela os valores lidos
	printf("%d:%d:%d", *(read + 2), *(read + 1), *(read));
	fflush(stdout);
	printf(" - %d - ", *(read + 3));
	fflush(stdout);
	printf("%d/%d/%d ", *(read + 4), *(read + 5), *(read + 6));
	printf("\n");
	fflush(stdout);

	I2C_close(i2c);
}

Void ajustarRTC() {

#define READ_COUNT 7
	UChar tsec, tmin, thour, tday, tdate, tmonth, tyear;
	int tmp;

	I2C_Handle i2c;
	UInt peripheralNum = 0; /* Interface I2C0 */
	I2C_Params i2cParams;
	I2C_Transaction i2cTransaction;
	UChar writeBuffer[9];
	//writeBuffer[0] = 0;
	UChar readBuffer[READ_COUNT];
	Bool transferOK;
	I2C_Params_init(&i2cParams);
	i2c = I2C_open(peripheralNum, &i2cParams);
	if (i2c == NULL) {
		printf("Não foi possível abrir a interface I2C0!\n");
		fflush(stdout);
	}

	/*
	 * Procedimento para ajustar a hora do RTC
	 */
	writeBuffer[0] = 0;	//inicio

	printf("Relógio\n"
			"\tDigite: \n\thora: ");
	fflush(stdout);
	scanf("%d", tmp);
	fflush(stdin);
	writeBuffer[3] = bin2bcd(tmp);
	printf("\tminuto: ");
	fflush(stdout);
	scanf("%d", tmp);
	fflush(stdin);
	writeBuffer[2] = bin2bcd(tmp);
	printf("\tsegundo: ");
	fflush(stdout);
	scanf("%d", tmp);
	fflush(stdin);
	writeBuffer[1] = bin2bcd(tmp);

//	writeBuffer[1] = bin2bcd(0); //segundo
//	writeBuffer[2] = bin2bcd(59); //minuto
//	writeBuffer[3] = bin2bcd(21); //hora
	writeBuffer[4] = bin2bcd(5); //dia da semana
	writeBuffer[5] = bin2bcd(15); //dia
	writeBuffer[6] = bin2bcd(8); // mes
	writeBuffer[7] = bin2bcd(14); //ano
	writeBuffer[8] = 0; //fim

	i2cTransaction.slaveAddress = 0x68; /* 7-bit peripheral slave address */
	i2cTransaction.writeBuf = writeBuffer; /* Buffer to be written */
	i2cTransaction.writeCount = 9; /* Number of bytes to be written */
	i2cTransaction.readBuf = readBuffer; /* Buffer to be read */
	i2cTransaction.readCount = READ_COUNT; /* Number of bytes to be read */
	transferOK = I2C_transfer(i2c, &i2cTransaction); /* Perform I2C transfer */
	if (!transferOK) {
		printf("Falha na comunicação\n");
		fflush(stdout);
	}
	/*
	 * Final do procedimento para ajuste de hora do RTC
	 */

	//Seta os parâmetros para a comunicação
//	i2cTransaction.slaveAddress = 0x68; /* 7-bit peripheral slave address */
//	i2cTransaction.writeBuf = writeBuffer; /* Buffer to be written */
//	i2cTransaction.writeCount = 1; /* Number of bytes to be written */
//	i2cTransaction.readBuf = readBuffer; /* Buffer to be read */
//	i2cTransaction.readCount = READ_COUNT; /* Number of bytes to be read */
	Task_sleep(100);
	//Comunica com o dispositivo
	transferOK = I2C_transfer(i2c, &i2cTransaction);
	if (!transferOK) {
		printf("Falha na comunicação\n");
		fflush(stdout);
	}

	tsec = bcd2dec(readBuffer[0]) & 0x7f;
	tmin = bcd2dec(readBuffer[1]);
	thour = bcd2dec(readBuffer[2]) & 0x3f;
	tday = bcd2dec(readBuffer[3]);
	tdate = bcd2dec(readBuffer[4]);
	tmonth = bcd2dec(readBuffer[5]);
	tyear = bcd2dec(readBuffer[6]);

	//Mostra na tela os valores lidos
	printf("%d:%d:%d", thour, tmin, tsec);
	fflush(stdout);
	printf(" - %d - ", tday);
	fflush(stdout);
	printf("%d/%d/%d ", tdate, tmonth, tyear);
	printf("\n");
	fflush(stdout);

	I2C_close(i2c);
}
